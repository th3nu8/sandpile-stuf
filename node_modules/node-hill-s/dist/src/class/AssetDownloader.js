"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetDownloader = void 0;
const phin = require("phin")
    .defaults({ "timeout": 12000 });
const ASSET_API = (itemId) => `https://sandpile.xyz/api/getAsset/${itemId}`;
class AssetDownloader {
    constructor() {
        this.cache = {};
    }
    getAssetData(assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!assetId)
                return;
            if (this.cache[assetId])
                return this.cache[assetId];
            const assetData = {
                mesh: null,
                texture: null
            };
            let req;
            try {
                req = (yield phin({ url: ASSET_API(assetId), parse: "json" })).body;
                if (req.error)
                    throw new Error(req.error.message);
            }
            catch (_a) {
                return Promise.reject(`AssetDownloader: Failure retrieving asset data for ${assetId}.`);
            }
            assetData.mesh = req.model;
            assetData.texture = req.texture;
            this.cache[assetId] = Object.assign({}, assetData);
            return assetData;
        });
    }
}
exports.AssetDownloader = AssetDownloader;
const assetDownloader = new AssetDownloader();
exports.default = assetDownloader;
